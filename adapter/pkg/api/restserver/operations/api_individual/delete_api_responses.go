// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/wso2/micro-gw/pkg/api/models"
)

// DeleteAPIOKCode is the HTTP code returned for type DeleteAPIOK
const DeleteAPIOKCode int = 200

/*DeleteAPIOK OK.
API successfully undeployed from the Microgateway.


swagger:response deleteApiOK
*/
type DeleteAPIOK struct {

	/*
	  In: Body
	*/
	Payload *models.DeployResponse `json:"body,omitempty"`
}

// NewDeleteAPIOK creates DeleteAPIOK with default headers values
func NewDeleteAPIOK() *DeleteAPIOK {

	return &DeleteAPIOK{}
}

// WithPayload adds the payload to the delete Api o k response
func (o *DeleteAPIOK) WithPayload(payload *models.DeployResponse) *DeleteAPIOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Api o k response
func (o *DeleteAPIOK) SetPayload(payload *models.DeployResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteAPIOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteAPIBadRequestCode is the HTTP code returned for type DeleteAPIBadRequest
const DeleteAPIBadRequestCode int = 400

/*DeleteAPIBadRequest Bad Request.
Invalid request or validation error


swagger:response deleteApiBadRequest
*/
type DeleteAPIBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteAPIBadRequest creates DeleteAPIBadRequest with default headers values
func NewDeleteAPIBadRequest() *DeleteAPIBadRequest {

	return &DeleteAPIBadRequest{}
}

// WithPayload adds the payload to the delete Api bad request response
func (o *DeleteAPIBadRequest) WithPayload(payload *models.Error) *DeleteAPIBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Api bad request response
func (o *DeleteAPIBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteAPIBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteAPINotFoundCode is the HTTP code returned for type DeleteAPINotFound
const DeleteAPINotFoundCode int = 404

/*DeleteAPINotFound Not Found.
Requested API does not exist.


swagger:response deleteApiNotFound
*/
type DeleteAPINotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteAPINotFound creates DeleteAPINotFound with default headers values
func NewDeleteAPINotFound() *DeleteAPINotFound {

	return &DeleteAPINotFound{}
}

// WithPayload adds the payload to the delete Api not found response
func (o *DeleteAPINotFound) WithPayload(payload *models.Error) *DeleteAPINotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Api not found response
func (o *DeleteAPINotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteAPINotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
