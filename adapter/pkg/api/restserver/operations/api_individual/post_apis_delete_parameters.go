// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPostApisDeleteParams creates a new PostApisDeleteParams object
//
// There are no default values defined in the spec.
func NewPostApisDeleteParams() PostApisDeleteParams {

	return PostApisDeleteParams{}
}

// PostApisDeleteParams contains all the bound params for the post apis delete operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostApisDelete
type PostApisDeleteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of the API

	  Required: true
	  In: query
	*/
	APIName string
	/*version of the API

	  Required: true
	  In: query
	*/
	Version string
	/*Virtual Host of the API

	  In: query
	*/
	Vhost *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostApisDeleteParams() beforehand.
func (o *PostApisDeleteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAPIName, qhkAPIName, _ := qs.GetOK("apiName")
	if err := o.bindAPIName(qAPIName, qhkAPIName, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qVhost, qhkVhost, _ := qs.GetOK("vhost")
	if err := o.bindVhost(qVhost, qhkVhost, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAPIName binds and validates parameter APIName from query.
func (o *PostApisDeleteParams) bindAPIName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("apiName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("apiName", "query", raw); err != nil {
		return err
	}
	o.APIName = raw

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *PostApisDeleteParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("version", "query", raw); err != nil {
		return err
	}
	o.Version = raw

	return nil
}

// bindVhost binds and validates parameter Vhost from query.
func (o *PostApisDeleteParams) bindVhost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Vhost = &raw

	return nil
}
