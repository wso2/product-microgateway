// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/wso2/micro-gw/pkg/api/models"
)

// PostApisDeleteHandlerFunc turns a function with the right signature into a post apis delete handler
type PostApisDeleteHandlerFunc func(PostApisDeleteParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostApisDeleteHandlerFunc) Handle(params PostApisDeleteParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostApisDeleteHandler interface for that can handle valid post apis delete params
type PostApisDeleteHandler interface {
	Handle(PostApisDeleteParams, *models.Principal) middleware.Responder
}

// NewPostApisDelete creates a new http.Handler for the post apis delete operation
func NewPostApisDelete(ctx *middleware.Context, handler PostApisDeleteHandler) *PostApisDelete {
	return &PostApisDelete{Context: ctx, Handler: handler}
}

/* PostApisDelete swagger:route POST /apis/delete API (Individual) postApisDelete

Delete deployed API

This operation can be used to delete a API that was deployed


*/
type PostApisDelete struct {
	Context *middleware.Context
	Handler PostApisDeleteHandler
}

func (o *PostApisDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostApisDeleteParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
