// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package keymgt

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RevokedTokenDiscoveryServiceClient is the client API for RevokedTokenDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevokedTokenDiscoveryServiceClient interface {
	StreamTokens(ctx context.Context, opts ...grpc.CallOption) (RevokedTokenDiscoveryService_StreamTokensClient, error)
	FetchTokens(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error)
}

type revokedTokenDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevokedTokenDiscoveryServiceClient(cc grpc.ClientConnInterface) RevokedTokenDiscoveryServiceClient {
	return &revokedTokenDiscoveryServiceClient{cc}
}

func (c *revokedTokenDiscoveryServiceClient) StreamTokens(ctx context.Context, opts ...grpc.CallOption) (RevokedTokenDiscoveryService_StreamTokensClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevokedTokenDiscoveryService_ServiceDesc.Streams[0], "/wso2.discovery.service.keymgt.RevokedTokenDiscoveryService/StreamTokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &revokedTokenDiscoveryServiceStreamTokensClient{stream}
	return x, nil
}

type RevokedTokenDiscoveryService_StreamTokensClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type revokedTokenDiscoveryServiceStreamTokensClient struct {
	grpc.ClientStream
}

func (x *revokedTokenDiscoveryServiceStreamTokensClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *revokedTokenDiscoveryServiceStreamTokensClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revokedTokenDiscoveryServiceClient) FetchTokens(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error) {
	out := new(v3.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/wso2.discovery.service.keymgt.RevokedTokenDiscoveryService/FetchTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevokedTokenDiscoveryServiceServer is the server API for RevokedTokenDiscoveryService service.
// All implementations must embed UnimplementedRevokedTokenDiscoveryServiceServer
// for forward compatibility
type RevokedTokenDiscoveryServiceServer interface {
	StreamTokens(RevokedTokenDiscoveryService_StreamTokensServer) error
	FetchTokens(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error)
	mustEmbedUnimplementedRevokedTokenDiscoveryServiceServer()
}

// UnimplementedRevokedTokenDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRevokedTokenDiscoveryServiceServer struct {
}

func (UnimplementedRevokedTokenDiscoveryServiceServer) StreamTokens(RevokedTokenDiscoveryService_StreamTokensServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTokens not implemented")
}
func (UnimplementedRevokedTokenDiscoveryServiceServer) FetchTokens(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTokens not implemented")
}
func (UnimplementedRevokedTokenDiscoveryServiceServer) mustEmbedUnimplementedRevokedTokenDiscoveryServiceServer() {
}

// UnsafeRevokedTokenDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevokedTokenDiscoveryServiceServer will
// result in compilation errors.
type UnsafeRevokedTokenDiscoveryServiceServer interface {
	mustEmbedUnimplementedRevokedTokenDiscoveryServiceServer()
}

func RegisterRevokedTokenDiscoveryServiceServer(s grpc.ServiceRegistrar, srv RevokedTokenDiscoveryServiceServer) {
	s.RegisterService(&RevokedTokenDiscoveryService_ServiceDesc, srv)
}

func _RevokedTokenDiscoveryService_StreamTokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RevokedTokenDiscoveryServiceServer).StreamTokens(&revokedTokenDiscoveryServiceStreamTokensServer{stream})
}

type RevokedTokenDiscoveryService_StreamTokensServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type revokedTokenDiscoveryServiceStreamTokensServer struct {
	grpc.ServerStream
}

func (x *revokedTokenDiscoveryServiceStreamTokensServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *revokedTokenDiscoveryServiceStreamTokensServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RevokedTokenDiscoveryService_FetchTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevokedTokenDiscoveryServiceServer).FetchTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wso2.discovery.service.keymgt.RevokedTokenDiscoveryService/FetchTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevokedTokenDiscoveryServiceServer).FetchTokens(ctx, req.(*v3.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RevokedTokenDiscoveryService_ServiceDesc is the grpc.ServiceDesc for RevokedTokenDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevokedTokenDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wso2.discovery.service.keymgt.RevokedTokenDiscoveryService",
	HandlerType: (*RevokedTokenDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTokens",
			Handler:    _RevokedTokenDiscoveryService_FetchTokens_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTokens",
			Handler:       _RevokedTokenDiscoveryService_StreamTokens_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/keymgt/rtds.proto",
}
