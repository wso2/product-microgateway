// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wso2/discovery/config/enforcer/mcp.proto

package org.wso2.choreo.connect.discovery.config.enforcer;

/**
 * Protobuf type {@code wso2.discovery.config.enforcer.Mcp}
 */
public final class Mcp extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:wso2.discovery.config.enforcer.Mcp)
    McpOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Mcp.newBuilder() to construct.
  private Mcp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Mcp() {
    serviceUrl_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Mcp();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Mcp(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            serviceUrl_ = s;
            break;
          }
          case 16: {

            poolSize_ = input.readInt32();
            break;
          }
          case 24: {

            connectionTimeout_ = input.readInt32();
            break;
          }
          case 32: {

            connectionRequestTimeout_ = input.readInt32();
            break;
          }
          case 40: {

            socketTimeout_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.wso2.choreo.connect.discovery.config.enforcer.McpConfigProto.internal_static_wso2_discovery_config_enforcer_Mcp_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.wso2.choreo.connect.discovery.config.enforcer.McpConfigProto.internal_static_wso2_discovery_config_enforcer_Mcp_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.wso2.choreo.connect.discovery.config.enforcer.Mcp.class, org.wso2.choreo.connect.discovery.config.enforcer.Mcp.Builder.class);
  }

  public static final int SERVICEURL_FIELD_NUMBER = 1;
  private volatile java.lang.Object serviceUrl_;
  /**
   * <pre>
   * MCP transform service URL
   * </pre>
   *
   * <code>string serviceUrl = 1;</code>
   * @return The serviceUrl.
   */
  @java.lang.Override
  public java.lang.String getServiceUrl() {
    java.lang.Object ref = serviceUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      serviceUrl_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * MCP transform service URL
   * </pre>
   *
   * <code>string serviceUrl = 1;</code>
   * @return The bytes for serviceUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getServiceUrlBytes() {
    java.lang.Object ref = serviceUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      serviceUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int POOLSIZE_FIELD_NUMBER = 2;
  private int poolSize_;
  /**
   * <pre>
   * MCP HTTP client pool size
   * </pre>
   *
   * <code>int32 poolSize = 2;</code>
   * @return The poolSize.
   */
  @java.lang.Override
  public int getPoolSize() {
    return poolSize_;
  }

  public static final int CONNECTIONTIMEOUT_FIELD_NUMBER = 3;
  private int connectionTimeout_;
  /**
   * <pre>
   * MCP HTTP client connection timeout
   * </pre>
   *
   * <code>int32 connectionTimeout = 3;</code>
   * @return The connectionTimeout.
   */
  @java.lang.Override
  public int getConnectionTimeout() {
    return connectionTimeout_;
  }

  public static final int CONNECTIONREQUESTTIMEOUT_FIELD_NUMBER = 4;
  private int connectionRequestTimeout_;
  /**
   * <pre>
   * MCP HTTP client waiting for a connection timeout
   * </pre>
   *
   * <code>int32 connectionRequestTimeout = 4;</code>
   * @return The connectionRequestTimeout.
   */
  @java.lang.Override
  public int getConnectionRequestTimeout() {
    return connectionRequestTimeout_;
  }

  public static final int SOCKETTIMEOUT_FIELD_NUMBER = 5;
  private int socketTimeout_;
  /**
   * <pre>
   * // MCP HTTP client socket timeout
   * </pre>
   *
   * <code>int32 socketTimeout = 5;</code>
   * @return The socketTimeout.
   */
  @java.lang.Override
  public int getSocketTimeout() {
    return socketTimeout_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getServiceUrlBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serviceUrl_);
    }
    if (poolSize_ != 0) {
      output.writeInt32(2, poolSize_);
    }
    if (connectionTimeout_ != 0) {
      output.writeInt32(3, connectionTimeout_);
    }
    if (connectionRequestTimeout_ != 0) {
      output.writeInt32(4, connectionRequestTimeout_);
    }
    if (socketTimeout_ != 0) {
      output.writeInt32(5, socketTimeout_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getServiceUrlBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serviceUrl_);
    }
    if (poolSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, poolSize_);
    }
    if (connectionTimeout_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, connectionTimeout_);
    }
    if (connectionRequestTimeout_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, connectionRequestTimeout_);
    }
    if (socketTimeout_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, socketTimeout_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.wso2.choreo.connect.discovery.config.enforcer.Mcp)) {
      return super.equals(obj);
    }
    org.wso2.choreo.connect.discovery.config.enforcer.Mcp other = (org.wso2.choreo.connect.discovery.config.enforcer.Mcp) obj;

    if (!getServiceUrl()
        .equals(other.getServiceUrl())) return false;
    if (getPoolSize()
        != other.getPoolSize()) return false;
    if (getConnectionTimeout()
        != other.getConnectionTimeout()) return false;
    if (getConnectionRequestTimeout()
        != other.getConnectionRequestTimeout()) return false;
    if (getSocketTimeout()
        != other.getSocketTimeout()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SERVICEURL_FIELD_NUMBER;
    hash = (53 * hash) + getServiceUrl().hashCode();
    hash = (37 * hash) + POOLSIZE_FIELD_NUMBER;
    hash = (53 * hash) + getPoolSize();
    hash = (37 * hash) + CONNECTIONTIMEOUT_FIELD_NUMBER;
    hash = (53 * hash) + getConnectionTimeout();
    hash = (37 * hash) + CONNECTIONREQUESTTIMEOUT_FIELD_NUMBER;
    hash = (53 * hash) + getConnectionRequestTimeout();
    hash = (37 * hash) + SOCKETTIMEOUT_FIELD_NUMBER;
    hash = (53 * hash) + getSocketTimeout();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.wso2.choreo.connect.discovery.config.enforcer.Mcp prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code wso2.discovery.config.enforcer.Mcp}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:wso2.discovery.config.enforcer.Mcp)
      org.wso2.choreo.connect.discovery.config.enforcer.McpOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.wso2.choreo.connect.discovery.config.enforcer.McpConfigProto.internal_static_wso2_discovery_config_enforcer_Mcp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.wso2.choreo.connect.discovery.config.enforcer.McpConfigProto.internal_static_wso2_discovery_config_enforcer_Mcp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.wso2.choreo.connect.discovery.config.enforcer.Mcp.class, org.wso2.choreo.connect.discovery.config.enforcer.Mcp.Builder.class);
    }

    // Construct using org.wso2.choreo.connect.discovery.config.enforcer.Mcp.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      serviceUrl_ = "";

      poolSize_ = 0;

      connectionTimeout_ = 0;

      connectionRequestTimeout_ = 0;

      socketTimeout_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.wso2.choreo.connect.discovery.config.enforcer.McpConfigProto.internal_static_wso2_discovery_config_enforcer_Mcp_descriptor;
    }

    @java.lang.Override
    public org.wso2.choreo.connect.discovery.config.enforcer.Mcp getDefaultInstanceForType() {
      return org.wso2.choreo.connect.discovery.config.enforcer.Mcp.getDefaultInstance();
    }

    @java.lang.Override
    public org.wso2.choreo.connect.discovery.config.enforcer.Mcp build() {
      org.wso2.choreo.connect.discovery.config.enforcer.Mcp result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.wso2.choreo.connect.discovery.config.enforcer.Mcp buildPartial() {
      org.wso2.choreo.connect.discovery.config.enforcer.Mcp result = new org.wso2.choreo.connect.discovery.config.enforcer.Mcp(this);
      result.serviceUrl_ = serviceUrl_;
      result.poolSize_ = poolSize_;
      result.connectionTimeout_ = connectionTimeout_;
      result.connectionRequestTimeout_ = connectionRequestTimeout_;
      result.socketTimeout_ = socketTimeout_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.wso2.choreo.connect.discovery.config.enforcer.Mcp) {
        return mergeFrom((org.wso2.choreo.connect.discovery.config.enforcer.Mcp)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.wso2.choreo.connect.discovery.config.enforcer.Mcp other) {
      if (other == org.wso2.choreo.connect.discovery.config.enforcer.Mcp.getDefaultInstance()) return this;
      if (!other.getServiceUrl().isEmpty()) {
        serviceUrl_ = other.serviceUrl_;
        onChanged();
      }
      if (other.getPoolSize() != 0) {
        setPoolSize(other.getPoolSize());
      }
      if (other.getConnectionTimeout() != 0) {
        setConnectionTimeout(other.getConnectionTimeout());
      }
      if (other.getConnectionRequestTimeout() != 0) {
        setConnectionRequestTimeout(other.getConnectionRequestTimeout());
      }
      if (other.getSocketTimeout() != 0) {
        setSocketTimeout(other.getSocketTimeout());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.wso2.choreo.connect.discovery.config.enforcer.Mcp parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.wso2.choreo.connect.discovery.config.enforcer.Mcp) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object serviceUrl_ = "";
    /**
     * <pre>
     * MCP transform service URL
     * </pre>
     *
     * <code>string serviceUrl = 1;</code>
     * @return The serviceUrl.
     */
    public java.lang.String getServiceUrl() {
      java.lang.Object ref = serviceUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serviceUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * MCP transform service URL
     * </pre>
     *
     * <code>string serviceUrl = 1;</code>
     * @return The bytes for serviceUrl.
     */
    public com.google.protobuf.ByteString
        getServiceUrlBytes() {
      java.lang.Object ref = serviceUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serviceUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * MCP transform service URL
     * </pre>
     *
     * <code>string serviceUrl = 1;</code>
     * @param value The serviceUrl to set.
     * @return This builder for chaining.
     */
    public Builder setServiceUrl(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      serviceUrl_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MCP transform service URL
     * </pre>
     *
     * <code>string serviceUrl = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearServiceUrl() {
      
      serviceUrl_ = getDefaultInstance().getServiceUrl();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MCP transform service URL
     * </pre>
     *
     * <code>string serviceUrl = 1;</code>
     * @param value The bytes for serviceUrl to set.
     * @return This builder for chaining.
     */
    public Builder setServiceUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      serviceUrl_ = value;
      onChanged();
      return this;
    }

    private int poolSize_ ;
    /**
     * <pre>
     * MCP HTTP client pool size
     * </pre>
     *
     * <code>int32 poolSize = 2;</code>
     * @return The poolSize.
     */
    @java.lang.Override
    public int getPoolSize() {
      return poolSize_;
    }
    /**
     * <pre>
     * MCP HTTP client pool size
     * </pre>
     *
     * <code>int32 poolSize = 2;</code>
     * @param value The poolSize to set.
     * @return This builder for chaining.
     */
    public Builder setPoolSize(int value) {
      
      poolSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MCP HTTP client pool size
     * </pre>
     *
     * <code>int32 poolSize = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPoolSize() {
      
      poolSize_ = 0;
      onChanged();
      return this;
    }

    private int connectionTimeout_ ;
    /**
     * <pre>
     * MCP HTTP client connection timeout
     * </pre>
     *
     * <code>int32 connectionTimeout = 3;</code>
     * @return The connectionTimeout.
     */
    @java.lang.Override
    public int getConnectionTimeout() {
      return connectionTimeout_;
    }
    /**
     * <pre>
     * MCP HTTP client connection timeout
     * </pre>
     *
     * <code>int32 connectionTimeout = 3;</code>
     * @param value The connectionTimeout to set.
     * @return This builder for chaining.
     */
    public Builder setConnectionTimeout(int value) {
      
      connectionTimeout_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MCP HTTP client connection timeout
     * </pre>
     *
     * <code>int32 connectionTimeout = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearConnectionTimeout() {
      
      connectionTimeout_ = 0;
      onChanged();
      return this;
    }

    private int connectionRequestTimeout_ ;
    /**
     * <pre>
     * MCP HTTP client waiting for a connection timeout
     * </pre>
     *
     * <code>int32 connectionRequestTimeout = 4;</code>
     * @return The connectionRequestTimeout.
     */
    @java.lang.Override
    public int getConnectionRequestTimeout() {
      return connectionRequestTimeout_;
    }
    /**
     * <pre>
     * MCP HTTP client waiting for a connection timeout
     * </pre>
     *
     * <code>int32 connectionRequestTimeout = 4;</code>
     * @param value The connectionRequestTimeout to set.
     * @return This builder for chaining.
     */
    public Builder setConnectionRequestTimeout(int value) {
      
      connectionRequestTimeout_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MCP HTTP client waiting for a connection timeout
     * </pre>
     *
     * <code>int32 connectionRequestTimeout = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearConnectionRequestTimeout() {
      
      connectionRequestTimeout_ = 0;
      onChanged();
      return this;
    }

    private int socketTimeout_ ;
    /**
     * <pre>
     * // MCP HTTP client socket timeout
     * </pre>
     *
     * <code>int32 socketTimeout = 5;</code>
     * @return The socketTimeout.
     */
    @java.lang.Override
    public int getSocketTimeout() {
      return socketTimeout_;
    }
    /**
     * <pre>
     * // MCP HTTP client socket timeout
     * </pre>
     *
     * <code>int32 socketTimeout = 5;</code>
     * @param value The socketTimeout to set.
     * @return This builder for chaining.
     */
    public Builder setSocketTimeout(int value) {
      
      socketTimeout_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * // MCP HTTP client socket timeout
     * </pre>
     *
     * <code>int32 socketTimeout = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSocketTimeout() {
      
      socketTimeout_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:wso2.discovery.config.enforcer.Mcp)
  }

  // @@protoc_insertion_point(class_scope:wso2.discovery.config.enforcer.Mcp)
  private static final org.wso2.choreo.connect.discovery.config.enforcer.Mcp DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.wso2.choreo.connect.discovery.config.enforcer.Mcp();
  }

  public static org.wso2.choreo.connect.discovery.config.enforcer.Mcp getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Mcp>
      PARSER = new com.google.protobuf.AbstractParser<Mcp>() {
    @java.lang.Override
    public Mcp parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Mcp(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Mcp> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Mcp> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.wso2.choreo.connect.discovery.config.enforcer.Mcp getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

