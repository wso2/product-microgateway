import wso2/gateway;
import ballerina/http;
import ballerina/config;
import ballerina/io;
import ballerina/log;

{{#if containerConfig.hasDocker}}import ballerina/docker;{{/if}}
{{#if containerConfig.kubernetes.kubernetesService.enable}}import ballerina/kubernetes;{{/if}}

//Throttle tier data initiation

{{#if config.mutualSSL.certificateDetails}}
    json ClientCerts ={{{config.mutualSSL.certificateDetails}}};
{{else}}
    json ClientCerts=null;
{{/if}}

http:ListenerConfiguration secureServiceEndpointConfiguration = { {{>http2}},
                                                                           {{>mutualSSL}}
                                                                           filters:getFilters()
                                                                       };

{{>docker}}
{{>secureKubernetesIngress}}
{{>kubernetesServiceHttps}}
listener gateway:APIGatewaySecureListener apiSecureListener = new(9095, secureServiceEndpointConfiguration);

http:ListenerConfiguration serviceEndpointConfiguration = { {{>http2}},
                                                                     filters:getFilters()
                                                                 };

{{>kubernetesIngress}}
{{>kubernetesServiceHttp}}
listener gateway:APIGatewayListener apiListener = new(9090, serviceEndpointConfiguration);


{{>secureKubernetesIngress}}
{{>kubernetesServiceToken}}
listener http:Listener tokenListenerEndpoint = new (
    {{#if containerConfig.kubernetes.secureKubernetesIngress.enable}}
        9096, config = {
        secureSocket: {
            keyStore: {
                path:  {{#if containerConfig.kubernetes.secureKubernetesIngress.keyStorePath}}
                    "{{containerConfig.kubernetes.secureKubernetesIngress.keyStorePath}}",
                {{else}}
                    gateway:DEFAULT_KEY_STORE_PATH,
                {{/if}}
                password: {{#if containerConfig.kubernetes.secureKubernetesIngress.keyStorePassword}}
                    "{{containerConfig.kubernetes.secureKubernetesIngress.keyStorePassword}}"
                {{else}}
                    gateway:DEFAULT_KEY_STORE_PASSWORD
                {{/if}}
            }
        }
    {{else if containerConfig.kubernetes.kubernetesService.enable}}
        9096, config = {
        host: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:LISTENER_CONF_HOST, gateway:DEFAULT_CONF_HOST),
        secureSocket: {
            keyStore: {
                path: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PATH,
                    gateway:DEFAULT_KEY_STORE_PATH),
                password: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PASSWORD,
                    gateway:DEFAULT_KEY_STORE_PASSWORD)
            }
        }
    {{else if containerConfig.kubernetes.kubernetesServiceToken.enable}}
            9096, config = {
            host: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:LISTENER_CONF_HOST, gateway:DEFAULT_CONF_HOST),
            secureSocket: {
                keyStore: {
                    path: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PATH,
                        gateway:DEFAULT_KEY_STORE_PATH),
                    password: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PASSWORD,
                        gateway:DEFAULT_KEY_STORE_PASSWORD)
                }
            }
    {{else}}
        gateway:getConfigIntValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:TOKEN_LISTENER_PORT, gateway:DEFAULT_TOKEN_LISTENER_PORT), config = {
        host: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:LISTENER_CONF_HOST, gateway:DEFAULT_CONF_HOST),
        secureSocket: {
            keyStore: {
                path: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PATH,
                    gateway:DEFAULT_KEY_STORE_PATH),
                password: gateway:getConfigValue(gateway:LISTENER_CONF_INSTANCE_ID, gateway:KEY_STORE_PASSWORD,
                    gateway:DEFAULT_KEY_STORE_PASSWORD)
            }
        }
    {{/if}}
    }
);

public function getFilters() returns http:RequestFilter[] {
    map<json> deployedPolicies = getDeployedPolicies();
   //map<json> openAPIs = <@untainted>getOpenAPIMapFromFile();

    // Grpc Filter
    gateway:GrpcFilter grpcFilter = new gateway:GrpcFilter();
    // Authentication filter
    gateway:PreAuthnFilter | gateway:PreAuthnFilterWrapper preAuthnFilter;
    // Throttling filter
    gateway:ThrottleFilter | gateway:ThrottleFilterWrapper throttleFilter;
    // Analytic filter
    gateway:AnalyticsRequestFilter analyticsFilter;
    //Validation filter
    //gateway:ValidationFilter | gateway:ValidationFilterWrapper validationFilter;
    // Authorization filter
    gateway:OAuthzFilter | gateway:OAuthzFilterWrapper  authorizationFilter;

    boolean isObservable = gateway:getConfigBooleanValue(gateway:MICRO_GATEWAY_METRICS, gateway:ENABLED, false)
        || gateway:getConfigBooleanValue(gateway:MICRO_GATEWAY_TRACING, gateway:ENABLED, false);
    
    if (isObservable) {
        preAuthnFilter = new gateway:PreAuthnFilterWrapper();
        throttleFilter = new gateway:ThrottleFilterWrapper(deployedPolicies);
        analyticsFilter =  new gateway:AnalyticsRequestFilterWrapper();
        //validationFilter = new gateway:ValidationFilterWrapper(openAPIs);
    } else {
        preAuthnFilter = new gateway:PreAuthnFilter();
        throttleFilter = new gateway:ThrottleFilter(deployedPolicies);
        analyticsFilter =  new gateway:AnalyticsRequestFilter();
        //validationFilter = new gateway:ValidationFilter(openAPIs);
    }

    authorizationFilter = gateway:getDefaultAuthorizationFilter();

    // Extension filter
    ExtensionFilter extensionFilter = new;

    return [grpcFilter, preAuthnFilter, authorizationFilter, throttleFilter, analyticsFilter,
        extensionFilter];
}

public function getOpenAPIMapFromFile() returns @tainted map<json>{
    map<json> openAPIMap = {};
    string filePath = "./openAPIJsonConstants.json";
    io:ReadableByteChannel|error rbc = io:openReadableFile(filePath);
    if(rbc is io:ReadableByteChannel) {
        io:ReadableCharacterChannel rch = new(rbc, "UTF8");
        var result = rch.readJson();
        if(result is map<json>) {
            openAPIMap = result;
        }
        var closeResult = rch.close();
        if (closeResult is error) {
            log:printError("Error occurred while closing character stream", err = closeResult);
        }
    } else {
        log:printError("Error occurred while reading the open API json file", err = rbc);
    }
    return openAPIMap;
}
