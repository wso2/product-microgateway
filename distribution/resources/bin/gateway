#!/bin/bash
# ---------------------------------------------------------------------------
#  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# ----------------------------------------------------------------------------
# Startup Script for API Manager Micro Gateway for ${label} APIs
#
# NOTE: Borrowed generously from Apache Tomcat startup scripts.
# -----------------------------------------------------------------------------

# OS specific support.  $var _must_ be set to either true or false.
#ulimit -n 100000

# Set Java Xms and Xmx values. The values specified here will set in gateway runtime.
JAVA_XMS_VALUE="256m"
JAVA_XMX_VALUE="512m"

# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

# Get standard environment variables
PRGDIR=`dirname "$PRG"`

# set BALLERINA_HOME
GW_HOME=`cd "$PRGDIR/.." ; pwd`
export MGW_VERSION="3.2.10"

JAVA_PATH=$GW_HOME/lib/jdk8u382-b05-jre
if [ -d "$JAVA_HOME" ]; then
  echo "JAVA_HOME: $JAVA_HOME"
else
  JAVA_HOME=$JAVA_PATH
fi

BASE_DIR=$PWD
cygwin=false;
darwin=false;
os400=false;
mingw=false;
case "`uname`" in
CYGWIN*) cygwin=true;;
MINGW*) mingw=true;;
OS400*) os400=true;;
Darwin*) darwin=true
esac

function change_java_home_path {
  # For Cygwin, ensure paths are in UNIX format before anything is touched
  if $cygwin; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  fi

  # For Migwn, ensure paths are in UNIX format before anything is touched
  if $mingw ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
  fi

  if [ -z "$JAVACMD" ] ; then
      if [ -n "$JAVA_HOME"  ] ; then
          if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
              # IBM's JDK on AIX uses strange locations for the executables
              JAVACMD="$JAVA_HOME/jre/sh/java"
          else
              JAVACMD="$JAVA_HOME/bin/java"
          fi
      else
            JAVACMD=java
      fi
  fi
  # For Cygwin, switch paths to Windows format before running java
  if $cygwin; then
      JAVACMD=`cygpath --absolute --windows "$JAVACMD"`
  fi
}


# For OS400
if $os400; then
  # Set job priority to standard for interactive (interactive - 6) by using
  # the interactive priority - 6, the helper threads that respond to requests
  # will be running at the same priority as interactive jobs.
  COMMAND='chgjob job('$JOBNAME') runpty(6)'
  system $COMMAND

  # Enable multi threading
  QIBM_MULTI_THREADED=Y
  export QIBM_MULTI_THREADED
fi

change_java_home_path

if [ ! -x "$JAVACMD" ] ; then
  echo "Warning!!! Externally set JAVACMD is not an executable file. Hence JAVA_HOME is set to internal JRE"
  JAVACMD=
  JAVA_HOME=$JAVA_PATH
  change_java_home_path
fi

JDK_18=`$JAVACMD -version 2>&1 | grep "1.8."`
JDK_11=`$JAVACMD -version 2>&1 | grep "11."`
JDK_17=`$JAVACMD -version 2>&1 | grep "17."`
if [ -z "$JDK_18" ] && [ -z "$JDK_11" ] && [ -z "$JDK_17" ]; then
  echo "Warning!!! Microgateway is supported only on Java 1.8, 11 and 17. Hence JAVA_HOME is set to internal JRE"
  JAVACMD=
  JAVA_HOME=$JAVA_PATH
  change_java_home_path
fi

# As we use different directory to keep microgateway configuration for the docker image
if [ -z "$MGW_CONF_DIR" ] ; then
    MGW_CONF_DIR="$GW_HOME/conf"
else
    if [ ! -d "$MGW_CONF_DIR" ] ; then
        echo "Error: Provided Microgateway Config Directory: ${MGW_CONF_DIR} is not available"
        exit 1
    fi
fi

# Ballerina test/debug command
argsLength=$#
args=($@)
for (( i=0; i<argsLength; i++ )); do
  if [  "${args[$i]}" = "test" ]; then
    for (( j=0; j<argsLength; j++ )); do
      if [ "${args[$j]}" = "--debug" ]; then
        BAL_JAVA_DEBUG=${args[$j+1]}
      fi
    done
  fi
done

#BAL_JAVA_DEBUG=<port> needs to be set if it is required to remote debug the java implementation
if [ -n "${BAL_JAVA_DEBUG+set}" ]; then
    if [ -z "$BAL_JAVA_DEBUG" ]; then
        echo "Please specify the debug port for debug parameter"
        exit 1
    else
      if [ -n "$JAVA_OPTS" ]; then
        echo "Warn: User specified JAVA_OPTS may interfere with BAL_JAVA_DEBUG"
      fi
      # 'quiet=y' avoids breaking LSP protocol in debug mode
      JAVA_OPTS="$JAVA_OPTS -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$BAL_JAVA_DEBUG,quiet=y"
    fi
fi

if [ -e "$GW_HOME/bin/gateway.pid" ]; then
  PID=`cat "$GW_HOME"/bin/gateway.pid`
fi

# set the ballerina thread pool size
if [ -z "$BALLERINA_MAX_POOL_SIZE" ]; then
  export BALLERINA_MAX_POOL_SIZE=100
else
  echo "Info: Ballerina thread pool size is set to ${BALLERINA_MAX_POOL_SIZE}"
fi

#To run the Java classes required for the identification of observability
java_cmd_tools () {
  METRIC_CLASSPATH=""
      for j in "$GW_HOME"/lib/gateway/*.jar
      do
          METRIC_CLASSPATH="$METRIC_CLASSPATH":$j
      done

  $JAVACMD \
      -Xms256m -Xmx1024m \
      -XX:+HeapDumpOnOutOfMemoryError \
      -XX:HeapDumpPath="$GW_HOME/heap-dump.hprof" \
      $JAVA_OPTS \
      -classpath "$METRIC_CLASSPATH" \
      org.wso2.micro.gateway.tools.Main "$1" "$2" $args | tee -a "$GW_HOME/logs/microgateway.log"
}

java_cmd_gateway () {
  $JAVACMD \
    -Xms${JAVA_XMS_VALUE} -Xmx$JAVA_XMX_VALUE \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath="$GW_HOME/heap-dump.hprof" \
    $JAVA_OPTS \
    -Dmgw-runtime.home="${GW_HOME}" \
    -Dballerina.home="${GW_HOME}/runtime" \
    -Djava.util.logging.config.class="org.ballerinalang.logging.util.LogConfigReader" \
    -Djava.util.logging.manager="org.ballerinalang.logging.BLogManager" \
    -jar $args --api.usage.data.path="$GW_HOME/api-usage-data" --b7a.config.file="$CONFIG_FILE" 2>&1 | tee -a "$GW_HOME/logs/microgateway.log"
}

java_cmd_gateway_background () {
  # using nohup sh to avoid erros in solaris OS.TODO
  nohup $SHELL <<EOF &
  $JAVACMD \
    -Xms${JAVA_XMS_VALUE} -Xmx$JAVA_XMX_VALUE \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath="$GW_HOME/heap-dump.hprof" \
    $JAVA_OPTS \
    -Dmgw-runtime.home="${GW_HOME}" \
    -Dballerina.home="${GW_HOME}/runtime" \
    -Djava.util.logging.config.class="org.ballerinalang.logging.util.LogConfigReader" \
    -Djava.util.logging.manager="org.ballerinalang.logging.BLogManager" \
    -jar $args --api.usage.data.path="$GW_HOME/api-usage-data" --b7a.config.file="$CONFIG_FILE" 2>&1 | tee -a "$GW_HOME/logs/microgateway.log"
EOF
}

# ----- Process the input command ----------------------------------------------
args=""
for c in $*
do
    if [ "$c" = "--debug" ]; then
          CMD="--debug"
          continue
    elif [ "$CMD" = "--debug" ]; then
          if [ -z "$PORT" ]; then
                PORT=$c
          fi
    elif [ "$c" = "--stop" ] || [ "$c" = "-stop" ] || [ "$c" = "stop" ]; then
          CMD="stop"
    elif [ "$c" = "--start" ] || [ "$c" = "-start" ] || [ "$c" = "start" ]; then
          CMD="start"
    elif [ "$c" = "--version" ] || [ "$c" = "-version" ] || [ "$c" = "version" ]; then
          CMD="version"
    elif [ "$c" = "--restart" ] || [ "$c" = "-restart" ] || [ "$c" = "restart" ]; then
          CMD="restart"
    elif [ "$c" = "--test" ] || [ "$c" = "-test" ] || [ "$c" = "test" ]; then
          CMD="test"
    else
        args="$args $c"
    fi
done

for last; do true; done

if [ "$CMD" = "version" ]; then
  if [ -e "$GW_HOME/version.txt" ]; then
    VERSION=`cat "$GW_HOME"/version.txt`
    echo "${VERSION}"
    exit 0
  fi
fi

if [ ! "$CMD" = "stop" ]; then
  if [[ "$CMD" == "" ]]; then
    if [[ ! -f "$1" ]]; then
      echo "Path to executable jar file is invalid"
      exit 0
    fi
  elif [[ ! -f "${args[1]}" ]]; then
      echo "Path to executable jar file is invalid"
      exit 0
  fi
fi

OBSERVABILITY_FLAG="false"
CONFIG_FILE="$MGW_CONF_DIR/micro-gw.conf"
K8S_MOUNT_PATH="/home/ballerina/conf/ballerina.conf"
# if externally config map mounted conf found then use that as the config file location. This happens when used with k8s
if [ -f "$K8S_MOUNT_PATH" ]; then
	CONFIG_FILE="$K8S_MOUNT_PATH"
fi
CONFIG_OUT_FILE="$GW_HOME/.config"

# setup log4j configuration file to debug native implementation
LOG4J_CONFIGURATION_FILE="${GW_HOME}/conf/log4j2.properties"
if [ -f "$LOG4J_CONFIGURATION_FILE" ]; then
  export JAVA_OPTS="$JAVA_OPTS -Dlog4j.configurationFile=${LOG4J_CONFIGURATION_FILE}"
else
  export JAVA_OPTS="$JAVA_OPTS -Dlog4j.configurationFactory=org.wso2.micro.gateway.core.logging.MgwLog4j2ConfigurationFactory"
fi

if [ ! "$CMD" = "stop" ]; then
    java_cmd_tools "$CONFIG_FILE" "$CONFIG_OUT_FILE"
  if [ -f "$CONFIG_OUT_FILE" ]; then
      if [ "$OBSERVABILITY_FLAG" != "true" ]; then
          if [ $(sed -n '1p' $CONFIG_OUT_FILE) == "true" ]; then
              OBSERVABILITY_FLAG="true"
          fi
      fi
      if [ "$OBSERVABILITY_FLAG" == "true" ]; then
          jmx_port=$(sed -n '2p' $CONFIG_OUT_FILE)
          export JAVA_OPTS="$JAVA_OPTS -javaagent:$GW_HOME/lib/gateway/jmx_prometheus_javaagent-0.18.0.jar=$jmx_port:$GW_HOME/conf/Prometheus/config.yml"
      fi
  fi
  if [ -a "$CONFIG_OUT_FILE" ];then
      rm $CONFIG_OUT_FILE
  fi
fi

if [ "$CMD" = "start" ]; then
  if [ -e "$GW_HOME/bin/gateway.pid" ]; then
    if  ps -p $PID > /dev/null ; then
      echo "Process is already running"
      exit 0
    fi
  fi
  rm -f file "$GW_HOME/bin/gateway.pid"

  java_cmd_gateway_background

  SESS_PID=$!
  #getting the process id of the child process which spawn by the parent process
  PROCESS_ID=""
  TEMP_PID=""
  while : ;
  do
    #spawns different child processes during startup. get the last existing one
    TEMP_PID=$(ps -ef | pgrep -P "$SESS_PID" | awk '{print $1}')
    if [ "$TEMP_PID" = "" ] ; then
      continue;
    fi
    if [ "$PROCESS_ID" = "$TEMP_PID" ] ; then
      echo $PROCESS_ID >> $GW_HOME/bin/gateway.pid
      exit 0
    fi
    PROCESS_ID=$TEMP_PID
    sleep 0.1
  done
elif [ "$CMD" = "stop" ]; then
  if [ -e "$GW_HOME/bin/gateway.pid" ]; then
    kill -term `cat $GW_HOME/bin/gateway.pid`
    rm -f file $GW_HOME/bin/gateway.pid
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
      echo "Microgateway has been stopped successfully"
    fi
    exit $exit_code
  else
    echo "No running microgateway is available"
    exit 0
  fi

elif [ "$CMD" = "restart" ]; then
  kill -term `cat $GW_HOME/bin/gateway.pid`
  process_status=0
  pid=`cat "$GW_HOME"/bin/gateway.pid`
  while [ "$process_status" -eq "0" ]
  do
        sleep 1
        ps -p$pid 2>&1 > /dev/null
        process_status=$?
  done
  rm -f file $GW_HOME/bin/gateway.pid
  java_cmd_gateway_background

  SESS_PID=$!
  PROCESS_ID=""
  TEMP_PID=""
  while : ;
  do
    #spawns different child processes during startup. get the last existing one
    TEMP_PID=$(ps -ef | pgrep -P "$SESS_PID" | awk '{print $1}')
    if [ "$TEMP_PID" = "" ] ; then
      continue;
    fi
    if [ "$PROCESS_ID" = "$TEMP_PID" ] ; then
      echo $PROCESS_ID >> $GW_HOME/bin/gateway.pid
      exit 0
    fi
    PROCESS_ID=$TEMP_PID
    sleep 0.1
  done
fi

# run the jar artifact created for ${label} APIs and redirect stderr to stdout and append stdout to $GW_HOME/logs/microgateway.log
java_cmd_gateway
