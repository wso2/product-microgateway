# Note - This file indicates default configurations in the WSO2 Microgateway.  
# Use this file to guide you on adding configurations to micro-gw.conf.
# If you want to change a default value, copy the configuration to <MG_RUNTIME_HOME>/conf/micro-gw.conf and change there.

# Transport listener Configurations
[listenerConfig]
  # Microgateway exposed IP / Host
  host = "0.0.0.0"
  # HTTP port that is used to make APIs available to the outside.
  httpPort = 9090
  # HTTPs port that is used to make APIs available to the outside and for endpoints(/token, /authorize, /revoke/, userinfo) of Key Manager.
  httpsPort = 9095
  # HTTP port for endpoints(/token, /authorize, /revoke/, userinfo) of Key Manager
  tokenListenerPort = 9096
  # Internal keystore
  keyStorePath = "${mgw-runtime.home}/runtime/bre/security/ballerinaKeystore.p12"
  keyStorePassword = "ballerina"
  # Truststore
  trustStorePath = "${mgw-runtime.home}/runtime/bre/security/ballerinaTruststore.p12"
  trustStorePassword = "ballerina"

# API Authorization security for the gateway and the backend
[authConfig]
  # Authorization header expected by the Microgateway. Can be overridden at API level using the extension
  authorizationHeader = "Authorization"
  # Remove authorization header from the backend request
  removeAuthHeaderFromOutMessage = true

# API JWT Authorization security for backend
[jwtConfig]
  # JWT header when forwarding the request to the backend
  header = "X-JWT-Assertion"

# Key manager configurations
[keyManager]
  # Connection URL of the Key Manager server
  serverUrl = "https://localhost:9443"
  # The token endpoint context of the Key Manager server
  tokenContext = "oauth2"
  # timestamp skew in seconds which added when checking the token validity period
  timestampSkew = 5000
  # External Key Manager
  external = false
  # Basic security configurations
  [keymanager.security.basic]
    enabled = true
    username = "admin"
    password = "admin"
  # Oauth2 security configurations
  [keymanager.security.oauth2]
    enabled = false
    # Authentication credentials should be sent via (AUTH_HEADER_BEARER/POST_BODY_BEARER/NO_BEARER)?
    credentialBearer = "AUTH_HEADER_BEARER"
    # Token URL for the authorization endpoint
    tokenUrl = ""
    # Oauth2 security grants
    [keymanager.security.oauth2.clientCredential]
      enabled = false
      clientId = ""
      clientSecret = ""
      scopes = ""
    [keymanager.security.oauth2.password]
      enabled = false
      clientId = ""
      clientSecret = ""
      scopes = ""
      username = ""
      password = ""
    [keymanager.security.oauth2.directToken]
      enabled = false
      accessToken = ""
    [keymanager.security.oauth2.refresh]
      enabled = false
      refreshUrl = ""
      scopes = ""
      refreshToken = ""
      clientId = ""
      clientSecret = ""

# JWT token authorization configurations. You can provide multiple JWT issuers
# Issuer 1
[[jwtTokenConfig]]
  issuer = "https://localhost:9443/oauth2/token"
  audience = "http://org.wso2.apimgt/gateway"
  certificateAlias = "wso2apim310"
  # Validate subscribed APIs
  validateSubscription = false
# Issuer 2
[[jwtTokenConfig]]
  issuer = "https://host:port/issuer"
  audience = "http://org.wso2.apimgt/gateway"
  certificateAlias = "alias"
  # Validate subscribed APIs
  validateSubscription = false

# JWT token revocation configurations
[tokenRevocationConfig]
# Real time revocation configurations
  [tokenRevocationConfig.realtime]
    enableRealtimeMessageRetrieval = false
    # The JMS Message Broker that identify messages related to revoked tokens
    jmsConnectionTopic = "tokenRevocation"
    # The message broker context factory
    jmsConnectioninitialContextFactory = "org.wso2.andes.jndi.PropertiesFileInitialContextFactory"
    # The message broker connection URL
    jmsConnectionProviderUrl= "amqp://admin:admin@carbon/carbon?brokerlist='tcp://localhost:5672'"
    # The username used to establish  the message broker connection
    jmsConnectionUsername = ""
    # The password used to establish  the message broker connection
    jmsConnectionPassword = ""
  # Persistent revocation configurations
  [tokenRevocationConfig.persistent]
    enablePersistentStorageRetrieval = false
    # Use etcd as the default persistent storage
    useDefault = true
    # The hostname of your persistent storage server (e.g.: <etcd-server-access-URL>/<service>/keys/jti/)
    hostname = "https://127.0.0.1:2379/v2/keys/jti/"
    # The username of your persistent storage server
    username = "root"
    # The password of your persistent storage server
    password = "root"

# token cache configurations
[caching]
  enabled=true
  # Expiry time of the cache in seconds
  tokenCacheExpiryTime = 900000
  # The size of the cache in MB
  tokenCacheCapacity = 10000
  # The factor of the cache that will be cleared when the cache is full.
  tokenCacheEvictionFactor = 0.25

# Analytics configurations
[analytics]
  # Configurations for file upload analytics
  [analytics.fileUpload]
    enable = false
    # Time interval in milliseconds for file uploading task 
    uploadingTimeSpanInMillis = 600000
    # Initial time delay in milliseconds for file upload analytics
    initialDelayInMillis = 5000
    # Endpoint configured to accept file upload analytics
    uploadingEndpoint = "https://localhost:9444/analytics/v1.0/usage/upload-file"
    # File rotating period in milliseconds
    rotatingPeriod = 600000
    # To enable file upload task
    taskUploadFiles = true
    # Username used in analytics server
    username = "admin"
    # Password used in in analytics server
    password = "admin"
  [analytics.gRPCAnalytics]
    enable = false
    # APIM Analytics endpoint configured to accept gRPC analytics
    endpointURL = "https://localhost:9806"
    # Time interval in milliseconds for gRPC connection recovery task
    reconnectTimeInMillies = 6000

# User configuration for Basic auth
[b7a.users]
  # [b7a.users.<username>]
  #   password = <sha1 encrypted password> / <prefix>:<encrypted password>
  #   scopes = <comma_separated_scopes> if scopes are needed
  # Example 1:
  [b7a.users.admin]
    # password should be sha1 encrypted by default
    password = "d033e22ae348aeb5660fc2140aec35850c4da997"
  # Example 2:
  [b7a.users.prometheus]
    # Password. @prefix used to denote that password is hashed with the algorithm (e.g.: @sha256, @sha512)
    password = "@sha256:{5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8}"
    # scopes (e.g. "observability" to enable observability)
    scopes = "observability"

# Request and response validation configurations
[validationConfig]
  enableRequestValidation = false
  enableResponseValidation = false

# Enable http2
[http2]
  enable = true

# HTTP client configuration
[httpClients]
  # Hostname verification
  verifyHostname=true

# Mutual SSL configuration
[mutualSSLConfig]
  # SSL Protocol to be used
  protocolName = "TLS"
  # SSL/TLS protocols to be enabled
  protocolVersions = "TLSv1.2,TLSv1.1"
  # List of ciphers to be used
  ciphers="TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  ,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256  ,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
  # The type of client certificate verification. (e.g.: "require" or "optional")
  sslVerifyClient = "optional"

# Throttling configurations
[throttlingConfig]
  # Configurations related to node local throttling.
  [throttlingConfig.nodeLocal]
    # Core number of threads in the thread pool.
    processThreadPoolCoreSize = 200
    # Maximum number of threads in the thread pool.
    processThreadPoolMaximumSize = 1000
    # Keep alive time of the threads in seconds
    processThreadPoolKeepAliveTime = 200
    # Throttle data cleanup task frequency in seconds.
    cleanUpFrequency = 3600

  # Connect with the central traffic manager
  enabledGlobalTMEventPublishing = false
  # The message broker context factory
  jmsConnectioninitialContextFactory = "org.wso2.andes.jndi.PropertiesFileInitialContextFactory"
  # The message broker connection URL
  jmsConnectionProviderUrl = "amqp://admin:admin@carbon/carbon?brokerlist='tcp://localhost:5672'"
  # The username used to establish  the message broker connection
  jmsConnectionUsername = ""
  # The password used to establish  the message broker connection
  jmsConnectionPassword = ""
  # The central traffic management solution URL
  throttleEndpointUrl = "https://localhost:9443/endpoints"
  # username:password to create the connection to the central traffic manager
  throttleEndpointbase64Header = "admin:admin"

# Observability configurations
[b7a.observability]
  # Observability metrics monitoring
  [b7a.observability.metrics]
    enabled = false
    # Reporter name that reports the collected Metrics to the remote metrics server
    reporter = "prometheus"
    # Prometheus to scrape the information
    [b7a.observability.metrics.prometheus]
      # port exposing api level metrics
      port=9797
      # port exposing vm level metrics
      jmx_port = 8080
      # secure port for api level and vm level metrics
      secure_port = 9000
  # Observability distributed tracing
  [b7a.observability.tracing]
    enabled = false
    # Tracer name
    name = "jaeger"
    # Jaeger for tracing
    [b7a.observability.tracing.jaeger.reporter]
      # The port which the Jaeger server is listening to
      port = 5775

# API Key authentication configurations
[apikey.tokenConfigs]
  issuer="https://localhost:9095/apikey"
  audience="http://org.wso2.apimgt/gateway"
  certificateAlias="ballerina"
  # Validate Allowed/subscribed APIs
  validateAllowedAPIs=false

# API Key Security Token Service(STS) configurations
[apikey.issuer]
  # API Key STS token configurations
  [apikey.issuer.tokenConfig]
    enabled=true
    keyStorePath="${mgw-runtime.home}/runtime/bre/security/ballerinaKeystore.p12"
    keyStorePassword="ballerina"
    issuer="https://localhost:9095/apikey"
    audience="http://org.wso2.apimgt/gateway"
    certificateAlias="ballerina"
    # validity time in seconds for the API Key. -1 is to indicate unlimited time 
    validityTime=-1
  # API Key STS Allowed APIs
  [apikey.issuer.apis]
    # provide the list of allowed APIs by the generated API Key
    # [apikey.issuer.apis.<number>] integer number starting from 1
      # name="API name given in the API Definition"
      # versions="Allowed versions" or "*" to allow all versions
    # Examples :
    # [apikey.issuer.apis.1]
      # name="Swagger Petstore New"
      # versions="1.0.0, v1, v2"
    # [apikey.issuer.apis.2]
      # name="MyAPI"
      # versions="*"